/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as ManageImport } from './routes/_manage'
import { Route as ManageUsersImport } from './routes/_manage/users'
import { Route as ManageSectionsImport } from './routes/_manage/sections'
import { Route as ManageQuestionsImport } from './routes/_manage/questions'
import { Route as ManageCoursesImport } from './routes/_manage/courses'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const ManageRoute = ManageImport.update({
  id: '/_manage',
  getParentRoute: () => rootRoute,
} as any)

const ManageUsersRoute = ManageUsersImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => ManageRoute,
} as any)

const ManageSectionsRoute = ManageSectionsImport.update({
  id: '/sections',
  path: '/sections',
  getParentRoute: () => ManageRoute,
} as any)

const ManageQuestionsRoute = ManageQuestionsImport.update({
  id: '/questions',
  path: '/questions',
  getParentRoute: () => ManageRoute,
} as any)

const ManageCoursesRoute = ManageCoursesImport.update({
  id: '/courses',
  path: '/courses',
  getParentRoute: () => ManageRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_manage': {
      id: '/_manage'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ManageImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/_manage/courses': {
      id: '/_manage/courses'
      path: '/courses'
      fullPath: '/courses'
      preLoaderRoute: typeof ManageCoursesImport
      parentRoute: typeof ManageImport
    }
    '/_manage/questions': {
      id: '/_manage/questions'
      path: '/questions'
      fullPath: '/questions'
      preLoaderRoute: typeof ManageQuestionsImport
      parentRoute: typeof ManageImport
    }
    '/_manage/sections': {
      id: '/_manage/sections'
      path: '/sections'
      fullPath: '/sections'
      preLoaderRoute: typeof ManageSectionsImport
      parentRoute: typeof ManageImport
    }
    '/_manage/users': {
      id: '/_manage/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof ManageUsersImport
      parentRoute: typeof ManageImport
    }
  }
}

// Create and export the route tree

interface ManageRouteChildren {
  ManageCoursesRoute: typeof ManageCoursesRoute
  ManageQuestionsRoute: typeof ManageQuestionsRoute
  ManageSectionsRoute: typeof ManageSectionsRoute
  ManageUsersRoute: typeof ManageUsersRoute
}

const ManageRouteChildren: ManageRouteChildren = {
  ManageCoursesRoute: ManageCoursesRoute,
  ManageQuestionsRoute: ManageQuestionsRoute,
  ManageSectionsRoute: ManageSectionsRoute,
  ManageUsersRoute: ManageUsersRoute,
}

const ManageRouteWithChildren =
  ManageRoute._addFileChildren(ManageRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof ManageRouteWithChildren
  '/login': typeof LoginRoute
  '/courses': typeof ManageCoursesRoute
  '/questions': typeof ManageQuestionsRoute
  '/sections': typeof ManageSectionsRoute
  '/users': typeof ManageUsersRoute
}

export interface FileRoutesByTo {
  '': typeof ManageRouteWithChildren
  '/login': typeof LoginRoute
  '/courses': typeof ManageCoursesRoute
  '/questions': typeof ManageQuestionsRoute
  '/sections': typeof ManageSectionsRoute
  '/users': typeof ManageUsersRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_manage': typeof ManageRouteWithChildren
  '/login': typeof LoginRoute
  '/_manage/courses': typeof ManageCoursesRoute
  '/_manage/questions': typeof ManageQuestionsRoute
  '/_manage/sections': typeof ManageSectionsRoute
  '/_manage/users': typeof ManageUsersRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/login' | '/courses' | '/questions' | '/sections' | '/users'
  fileRoutesByTo: FileRoutesByTo
  to: '' | '/login' | '/courses' | '/questions' | '/sections' | '/users'
  id:
    | '__root__'
    | '/_manage'
    | '/login'
    | '/_manage/courses'
    | '/_manage/questions'
    | '/_manage/sections'
    | '/_manage/users'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  ManageRoute: typeof ManageRouteWithChildren
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  ManageRoute: ManageRouteWithChildren,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_manage",
        "/login"
      ]
    },
    "/_manage": {
      "filePath": "_manage.tsx",
      "children": [
        "/_manage/courses",
        "/_manage/questions",
        "/_manage/sections",
        "/_manage/users"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/_manage/courses": {
      "filePath": "_manage/courses.tsx",
      "parent": "/_manage"
    },
    "/_manage/questions": {
      "filePath": "_manage/questions.tsx",
      "parent": "/_manage"
    },
    "/_manage/sections": {
      "filePath": "_manage/sections.tsx",
      "parent": "/_manage"
    },
    "/_manage/users": {
      "filePath": "_manage/users.tsx",
      "parent": "/_manage"
    }
  }
}
ROUTE_MANIFEST_END */
